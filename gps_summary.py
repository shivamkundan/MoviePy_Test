#!/usr/local/bin/python3

import pandas as pd
# import openpyxl
import os

from defs import *


# Flow --->
# gps_summary.py -> text2.py -> combine.py

# gps_summary.py : parse and save gps data
# text2.py       : load gps data and convert to moviepy text
# combine.py     : concat videos + composite texts/graphics

# make autogenerated trip report - infographic slide

# ==================================================================================================== #
# ==================================================================================================== #
def print_summary(NMEA_codes_dict):
	for code in NMEA_codes_dict.keys():
		# print (f"code: {code}")
		print (f"#items[{code}]: {len(NMEA_codes_dict[code])}")
		# for item in NMEA_codes_dict[code]:
		# 	print (item)
		# print()

def convert_coords_dms_to_decimal(in_txt):
	# Decimal Degrees = degrees + (minutes/60) + (seconds/3600)

	try:
		degrees=str(in_txt).split('.')[0]
		minutes=int(degrees[2:])

		degrees=int(degrees[:2])

		seconds=int(str(in_txt).split('.')[1])/100


		out=degrees+(minutes/60) + (seconds/3600)
	except Exception as e:
		out="XX"

	# print (degrees,minutes,seconds,"-->",out)

	return out
# ==================================================================================================== #
# ==================================================================================================== #

in_dir="/Volumes/T7_exFat/Dashcam_Videos/Drive_Around_May31/Front/"
out_dir="/Volumes/T7_exFat/Dashcam_Videos/Drive_Around_May31/Parsed_Data/"
# vid_file_name="20230528_191912_NF"
# vid_file_ext="mp4"
intermediate_file_name="out.txt" # where vid->strings are stored
outfile_name_suffix="_gps_summary.xlsx"


# Build paths and file names
intermediate_file=out_dir+intermediate_file_name
# vid_file=in_dir+vid_file_name+"."+vid_file_ext
# outfile=out_dir+vid_file_name+outfile_name_suffix
outfile=out_dir+"gps.xlsx"

# # ==================================================================================================== #
# # ==================================================================================================== #

# # Initial conversion to strings
# print ("extracting strings...")
# # os.system(f"strings {vid_file} | grep -e GPRMC -e GPVTG -e GPGSA -e GPGSV -e GPGLL > {intermediate_file}")
# os.system(f"strings {in_dir}*F.mp4 | grep -e GPRMC -e GPVTG -e GPGSA -e GPGSV -e GPGLL > {intermediate_file}")


# # ==================================================================================================== #
# # ==================================================================================================== #

def read_gps_info(infile):
	# Read file
	inlist=[]
	with open(infile,'r') as f:
		inlist=f.readlines()
	f.close()
	print (f"#Input lines: {len(inlist)}")

	# Main data struct
	NMEA_codes_dict={"GPRMC":[],
					 "GPVTG":[],
					 "GPGSA":[],
					 "GPGSV":[],
					 "GPGLL":[],
					}

	# Basic parse each line
	# $	0x24	36	Start delimiter
	# *	0x2a	42	Checksum delimiter
	# ,	0x2c	44	Field delimiter
	for line in inlist:
		l=line.replace("$",",").replace("*",",").replace("[","").replace("]","").replace("\n","")
		l=l.split(",")
		l[0]=l[0].replace("gps","").replace(" ","")

		print (l)
		curr_code=l[1]
		if (curr_code=="GPGSV"):
			if ( l[3]=="1"):
				NMEA_codes_dict[curr_code].append(l)
		else:
			NMEA_codes_dict[curr_code].append(l)
	return NMEA_codes_dict

def convert_speed(speed_kts):
	spd_mph=[]
	for item in list((speed_kts*1.151).round(decimals=1)):
		spd_mph.append(item)
	return pd.Series(spd_mph)

def fix_sats(sats_raw):
	prev_num_sats=-1

	sats_raw=list(sats_raw.fillna(0))

	# Substitute intermediate missing vals
	for i in range(0,len(sats_raw)):
		if sats_raw[i]==0:
			sats_raw[i]=prev_num_sats
		else:
			prev_num_sats=sats_raw[i]

	# Substitute initial missing vals
	for i in range(0,len(sats_raw)):
		if sats_raw[i]==-1:
			sats_raw[i]=0

	# Convert to int
	for i in range(0,len(sats_raw)):
		sats_raw[i]=int(sats_raw[i])

	return pd.Series(sats_raw)


# if __name__=="__main__":

infile=intermediate_file

NMEA_codes_dict=read_gps_info(infile)

# Print details
print_summary(NMEA_codes_dict)

# Convert to dataframes
df_GPRMC = pd.DataFrame(NMEA_codes_dict["GPRMC"], columns=GPRMC_headers)
df_GPGSV = pd.DataFrame(NMEA_codes_dict["GPGSV"], columns=GPGSV_headers)

# Typecasting
df_GPRMC["Speed (kts)"]=pd.to_numeric(df_GPRMC["Speed (kts)"])
df_GPRMC["Heading"]=pd.to_numeric(df_GPRMC["Heading"])
df_GPRMC["latitude"]=pd.to_numeric(df_GPRMC["latitude"])
df_GPRMC["longitude"]=pd.to_numeric(df_GPRMC["longitude"])
df_GPGSV["#SVs"]=pd.to_numeric(df_GPGSV["#SVs"])

# Merge with epoch as index
df_summary = df_GPRMC.merge(df_GPGSV[['epoch', '#SVs']], left_on='epoch',right_on='epoch',how="outer").drop(["code","timestamp","N/S","E/W","Date Stamp","Speed (kts)","Mag Variation","Mag Variation Dir","valid?","Checksum"], axis='columns')

# Convert, round, and truncate
df_summary["Speed (MPH)"]=convert_speed(df_GPRMC["Speed (kts)"])

# # Convert from unix epoch to readable date time
# df_summary["epoch2"]=pd.to_datetime(df_summary["epoch"], errors="raise", unit="ms", origin="unix")

# Fill in blank vals, round, and truncate
df_summary["#SVs"]=fix_sats(df_summary["#SVs"])



lat_dec=[]
for item in df_summary["latitude"]:
	lat_dec.append(convert_coords_dms_to_decimal (item))

long_dec=[]
for item in df_summary["longitude"]:
	long_dec.append(convert_coords_dms_to_decimal (item))


# print (long_dec)
df_summary["lat_dec"]=pd.Series(lat_dec)
df_summary["long_dec"]=pd.Series(long_dec)

print (df_summary)

print (f"saving to file: {outfile}")
df_summary.to_excel(outfile,index=False)



# # ==================================================================================================== #
# # ==================================================================================================== #
# # STAGE 2: convert gps data to moviepy text
# # ==================================================================================================== #
# # ==================================================================================================== #


# SPEED_TXT_POS=(400,980)
# SPEED_TXT_SIZE=50
# SPEED_TXT_COLOR="green"

# SATS_TXT_POS=(100,980)
# SATS_TXT_SIZE=50
# SATS_TXT_COLOR="yellow"

# HEADING_TXT_POS=(700,980)
# HEADING_TXT_SIZE=50
# HEADING_TXT_COLOR="red"
# HEADING_SUFFIX="Â°"

# # =======================================================
# def fix_sats(sats_raw):
# 	prev_num_sats=-1

# 	# Substitute intermediate missing vals
# 	for i in range(0,len(sats_raw)):
# 		if sats_raw[i]==0:
# 			sats_raw[i]=prev_num_sats
# 		else:
# 			prev_num_sats=sats_raw[i]

# 	# Substitute initial missing vals
# 	for i in range(0,len(sats_raw)):
# 		if sats_raw[i]==-1:
# 			sats_raw[i]=0

# 	return sats_raw

# # =======================================================

# speeds=list(df_summary["Speed (MPH)"])
# headings=list(df_summary["Heading"])
# satellites=fix_sats(list(df_summary["#SVs"].fillna(0)))

# # lats=list(df_summary["lat_dec"])
# # longs=list(df_summary["long_dec"])

# starts=[i for i in range(0,len(speeds))]
# durations=[1 for i in range(0,len(speeds))]

# # print (starts)
# # print (durations)
# # print (satellites)
# # exit()



# # ========================================================================
# def render_speed(speeds, starts, durations):
# 	outlist=[]
# 	for text,t,duration in zip(speeds, starts, durations):
# 		txt_clip = TextClip(str(text)+"MPH",fontsize = SPEED_TXT_SIZE, color=SPEED_TXT_COLOR)
# 		txt_clip = txt_clip.set_start(t)
# 		# txt_clip = txt_clip.set_pos('center').set_duration(duration)
# 		txt_clip = txt_clip.set_pos(SPEED_TXT_POS).set_duration(duration)
# 		outlist.append(txt_clip)
# 	return outlist

# def render_sats(satellites, starts, durations):
# 	sats=[]
# 	for text,t,duration in zip(satellites, starts, durations):
# 		text=str(text).split(".")[0]
# 		txt_clip = TextClip(text,fontsize = SATS_TXT_SIZE, color=SATS_TXT_COLOR)
# 		txt_clip = txt_clip.set_start(t)
# 		# txt_clip = txt_clip.set_pos('center').set_duration(duration)
# 		txt_clip = txt_clip.set_pos(SATS_TXT_POS).set_duration(duration)
# 		sats.append(txt_clip)
# 	return sats

# def render_headings(headings, starts, durations):
# 	headings_list=[]
# 	for text,t,duration in zip(headings, starts, durations):
# 		txt_clip = TextClip(str(text)+HEADING_SUFFIX,fontsize = HEADING_TXT_SIZE, color=HEADING_TXT_COLOR)
# 		txt_clip = txt_clip.set_start(t)
# 		# txt_clip = txt_clip.set_pos('center').set_duration(duration)
# 		txt_clip = txt_clip.set_pos(HEADING_TXT_POS).set_duration(duration)
# 		headings_list.append(txt_clip)
# 	return headings_list

# # ========================================================================
# # Render video
# from moviepy.editor import *

# # Labels:
# # [2x speed]

# vid_file_name="20230528_191912_NF"
# vid_file_ext="mp4"

# FPS=5
# # base_video=VideoFileClip(f"front/{vid_file_name}.{vid_file_ext}").without_audio()
# # base_video = base_video.set_fps(FPS)

# sat_icon = ImageClip('satellite.png', duration=30)
# sat_icon = sat_icon.set_position((100, 950))


# # finalList=[base_video,sat_icon]
# finalList=[sat_icon]
# finalList+=render_speed(speeds, starts, durations)
# finalList+=render_sats(satellites, starts, durations)
# finalList+=render_headings(headings, starts, durations)

# print (finalList)

# # final_video = CompositeVideoClip(finalList)
# # final_video.write_videofile(f"{vid_file_name}_{FPS}fps.{vid_file_ext}",threads = 4,  audio=False,remove_temp=True)